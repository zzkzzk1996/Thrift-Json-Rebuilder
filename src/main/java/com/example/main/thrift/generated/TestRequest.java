/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.main.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2021-2-20")
public class TestRequest implements org.apache.thrift.TBase<TestRequest, TestRequest._Fields>, java.io.Serializable, Cloneable, Comparable<TestRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestRequest");

  private static final org.apache.thrift.protocol.TField TEST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("testBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TEST_SINGLE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("testSingleByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("testBytes", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TEST_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("testShort", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField TEST_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("testInt", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEST_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("testLong", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TEST_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("testDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TEST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("testString", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField LIST_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("listInt", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField LIST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("listString", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LIST_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("listStruct", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SET_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("setInt", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField SET_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("setString", org.apache.thrift.protocol.TType.SET, (short)13);
  private static final org.apache.thrift.protocol.TField SET_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("setStruct", org.apache.thrift.protocol.TType.SET, (short)14);
  private static final org.apache.thrift.protocol.TField INT_TO_STR_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intToStrMap", org.apache.thrift.protocol.TType.MAP, (short)15);
  private static final org.apache.thrift.protocol.TField INT_TO_STRUCT_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intToStructMap", org.apache.thrift.protocol.TType.MAP, (short)16);
  private static final org.apache.thrift.protocol.TField INT_TO_STR_LIST_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intToStrListMap", org.apache.thrift.protocol.TType.MAP, (short)17);
  private static final org.apache.thrift.protocol.TField INT_TO_STRUCT_LIST_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intToStructListMap", org.apache.thrift.protocol.TType.MAP, (short)18);
  private static final org.apache.thrift.protocol.TField INT_TO_INT_TO_STR_MAP_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("intToIntToStrMapMap", org.apache.thrift.protocol.TType.MAP, (short)19);
  private static final org.apache.thrift.protocol.TField TEST_ENUM_FIELD_DESC = new org.apache.thrift.protocol.TField("testEnum", org.apache.thrift.protocol.TType.I32, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestRequestTupleSchemeFactory());
  }

  public boolean testBool; // required
  public byte testSingleByte; // required
  public ByteBuffer testBytes; // required
  public short testShort; // required
  public int testInt; // required
  public long testLong; // required
  public double testDouble; // required
  public String testString; // required
  public List<Integer> listInt; // required
  public List<String> listString; // required
  public List<TestStruct> listStruct; // required
  public Set<Integer> setInt; // required
  public Set<String> setString; // required
  public Set<TestStruct> setStruct; // required
  public Map<Integer,String> intToStrMap; // required
  public Map<Integer,TestStruct> intToStructMap; // required
  public Map<Integer,List<String>> intToStrListMap; // required
  public Map<Integer,List<TestStruct>> intToStructListMap; // required
  public Map<Integer,Map<Integer,String>> intToIntToStrMapMap; // required
  /**
   * 
   * @see TestEnum
   */
  public TestEnum testEnum; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEST_BOOL((short)1, "testBool"),
    TEST_SINGLE_BYTE((short)2, "testSingleByte"),
    TEST_BYTES((short)3, "testBytes"),
    TEST_SHORT((short)4, "testShort"),
    TEST_INT((short)5, "testInt"),
    TEST_LONG((short)6, "testLong"),
    TEST_DOUBLE((short)7, "testDouble"),
    TEST_STRING((short)8, "testString"),
    LIST_INT((short)9, "listInt"),
    LIST_STRING((short)10, "listString"),
    LIST_STRUCT((short)11, "listStruct"),
    SET_INT((short)12, "setInt"),
    SET_STRING((short)13, "setString"),
    SET_STRUCT((short)14, "setStruct"),
    INT_TO_STR_MAP((short)15, "intToStrMap"),
    INT_TO_STRUCT_MAP((short)16, "intToStructMap"),
    INT_TO_STR_LIST_MAP((short)17, "intToStrListMap"),
    INT_TO_STRUCT_LIST_MAP((short)18, "intToStructListMap"),
    INT_TO_INT_TO_STR_MAP_MAP((short)19, "intToIntToStrMapMap"),
    /**
     * 
     * @see TestEnum
     */
    TEST_ENUM((short)20, "testEnum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEST_BOOL
          return TEST_BOOL;
        case 2: // TEST_SINGLE_BYTE
          return TEST_SINGLE_BYTE;
        case 3: // TEST_BYTES
          return TEST_BYTES;
        case 4: // TEST_SHORT
          return TEST_SHORT;
        case 5: // TEST_INT
          return TEST_INT;
        case 6: // TEST_LONG
          return TEST_LONG;
        case 7: // TEST_DOUBLE
          return TEST_DOUBLE;
        case 8: // TEST_STRING
          return TEST_STRING;
        case 9: // LIST_INT
          return LIST_INT;
        case 10: // LIST_STRING
          return LIST_STRING;
        case 11: // LIST_STRUCT
          return LIST_STRUCT;
        case 12: // SET_INT
          return SET_INT;
        case 13: // SET_STRING
          return SET_STRING;
        case 14: // SET_STRUCT
          return SET_STRUCT;
        case 15: // INT_TO_STR_MAP
          return INT_TO_STR_MAP;
        case 16: // INT_TO_STRUCT_MAP
          return INT_TO_STRUCT_MAP;
        case 17: // INT_TO_STR_LIST_MAP
          return INT_TO_STR_LIST_MAP;
        case 18: // INT_TO_STRUCT_LIST_MAP
          return INT_TO_STRUCT_LIST_MAP;
        case 19: // INT_TO_INT_TO_STR_MAP_MAP
          return INT_TO_INT_TO_STR_MAP_MAP;
        case 20: // TEST_ENUM
          return TEST_ENUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TESTBOOL_ISSET_ID = 0;
  private static final int __TESTSINGLEBYTE_ISSET_ID = 1;
  private static final int __TESTSHORT_ISSET_ID = 2;
  private static final int __TESTINT_ISSET_ID = 3;
  private static final int __TESTLONG_ISSET_ID = 4;
  private static final int __TESTDOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("testBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEST_SINGLE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("testSingleByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("testBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TEST_SHORT, new org.apache.thrift.meta_data.FieldMetaData("testShort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TEST_INT, new org.apache.thrift.meta_data.FieldMetaData("testInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEST_LONG, new org.apache.thrift.meta_data.FieldMetaData("testLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEST_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("testDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TEST_STRING, new org.apache.thrift.meta_data.FieldMetaData("testString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIST_INT, new org.apache.thrift.meta_data.FieldMetaData("listInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LIST_STRING, new org.apache.thrift.meta_data.FieldMetaData("listString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LIST_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("listStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestStruct.class))));
    tmpMap.put(_Fields.SET_INT, new org.apache.thrift.meta_data.FieldMetaData("setInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SET_STRING, new org.apache.thrift.meta_data.FieldMetaData("setString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("setStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestStruct.class))));
    tmpMap.put(_Fields.INT_TO_STR_MAP, new org.apache.thrift.meta_data.FieldMetaData("intToStrMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INT_TO_STRUCT_MAP, new org.apache.thrift.meta_data.FieldMetaData("intToStructMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestStruct.class))));
    tmpMap.put(_Fields.INT_TO_STR_LIST_MAP, new org.apache.thrift.meta_data.FieldMetaData("intToStrListMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.INT_TO_STRUCT_LIST_MAP, new org.apache.thrift.meta_data.FieldMetaData("intToStructListMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TestStruct.class)))));
    tmpMap.put(_Fields.INT_TO_INT_TO_STR_MAP_MAP, new org.apache.thrift.meta_data.FieldMetaData("intToIntToStrMapMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.TEST_ENUM, new org.apache.thrift.meta_data.FieldMetaData("testEnum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TestEnum.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestRequest.class, metaDataMap);
  }

  public TestRequest() {
  }

  public TestRequest(
    boolean testBool,
    byte testSingleByte,
    ByteBuffer testBytes,
    short testShort,
    int testInt,
    long testLong,
    double testDouble,
    String testString,
    List<Integer> listInt,
    List<String> listString,
    List<TestStruct> listStruct,
    Set<Integer> setInt,
    Set<String> setString,
    Set<TestStruct> setStruct,
    Map<Integer,String> intToStrMap,
    Map<Integer,TestStruct> intToStructMap,
    Map<Integer,List<String>> intToStrListMap,
    Map<Integer,List<TestStruct>> intToStructListMap,
    Map<Integer,Map<Integer,String>> intToIntToStrMapMap,
    TestEnum testEnum)
  {
    this();
    this.testBool = testBool;
    setTestBoolIsSet(true);
    this.testSingleByte = testSingleByte;
    setTestSingleByteIsSet(true);
    this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(testBytes);
    this.testShort = testShort;
    setTestShortIsSet(true);
    this.testInt = testInt;
    setTestIntIsSet(true);
    this.testLong = testLong;
    setTestLongIsSet(true);
    this.testDouble = testDouble;
    setTestDoubleIsSet(true);
    this.testString = testString;
    this.listInt = listInt;
    this.listString = listString;
    this.listStruct = listStruct;
    this.setInt = setInt;
    this.setString = setString;
    this.setStruct = setStruct;
    this.intToStrMap = intToStrMap;
    this.intToStructMap = intToStructMap;
    this.intToStrListMap = intToStrListMap;
    this.intToStructListMap = intToStructListMap;
    this.intToIntToStrMapMap = intToIntToStrMapMap;
    this.testEnum = testEnum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestRequest(TestRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.testBool = other.testBool;
    this.testSingleByte = other.testSingleByte;
    if (other.isSetTestBytes()) {
      this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(other.testBytes);
    }
    this.testShort = other.testShort;
    this.testInt = other.testInt;
    this.testLong = other.testLong;
    this.testDouble = other.testDouble;
    if (other.isSetTestString()) {
      this.testString = other.testString;
    }
    if (other.isSetListInt()) {
      List<Integer> __this__listInt = new ArrayList<Integer>(other.listInt);
      this.listInt = __this__listInt;
    }
    if (other.isSetListString()) {
      List<String> __this__listString = new ArrayList<String>(other.listString);
      this.listString = __this__listString;
    }
    if (other.isSetListStruct()) {
      List<TestStruct> __this__listStruct = new ArrayList<TestStruct>(other.listStruct.size());
      for (TestStruct other_element : other.listStruct) {
        __this__listStruct.add(new TestStruct(other_element));
      }
      this.listStruct = __this__listStruct;
    }
    if (other.isSetSetInt()) {
      Set<Integer> __this__setInt = new HashSet<Integer>(other.setInt);
      this.setInt = __this__setInt;
    }
    if (other.isSetSetString()) {
      Set<String> __this__setString = new HashSet<String>(other.setString);
      this.setString = __this__setString;
    }
    if (other.isSetSetStruct()) {
      Set<TestStruct> __this__setStruct = new HashSet<TestStruct>(other.setStruct.size());
      for (TestStruct other_element : other.setStruct) {
        __this__setStruct.add(new TestStruct(other_element));
      }
      this.setStruct = __this__setStruct;
    }
    if (other.isSetIntToStrMap()) {
      Map<Integer,String> __this__intToStrMap = new HashMap<Integer,String>(other.intToStrMap);
      this.intToStrMap = __this__intToStrMap;
    }
    if (other.isSetIntToStructMap()) {
      Map<Integer,TestStruct> __this__intToStructMap = new HashMap<Integer,TestStruct>(other.intToStructMap.size());
      for (Map.Entry<Integer, TestStruct> other_element : other.intToStructMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        TestStruct other_element_value = other_element.getValue();

        Integer __this__intToStructMap_copy_key = other_element_key;

        TestStruct __this__intToStructMap_copy_value = new TestStruct(other_element_value);

        __this__intToStructMap.put(__this__intToStructMap_copy_key, __this__intToStructMap_copy_value);
      }
      this.intToStructMap = __this__intToStructMap;
    }
    if (other.isSetIntToStrListMap()) {
      Map<Integer,List<String>> __this__intToStrListMap = new HashMap<Integer,List<String>>(other.intToStrListMap.size());
      for (Map.Entry<Integer, List<String>> other_element : other.intToStrListMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        Integer __this__intToStrListMap_copy_key = other_element_key;

        List<String> __this__intToStrListMap_copy_value = new ArrayList<String>(other_element_value);

        __this__intToStrListMap.put(__this__intToStrListMap_copy_key, __this__intToStrListMap_copy_value);
      }
      this.intToStrListMap = __this__intToStrListMap;
    }
    if (other.isSetIntToStructListMap()) {
      Map<Integer,List<TestStruct>> __this__intToStructListMap = new HashMap<Integer,List<TestStruct>>(other.intToStructListMap.size());
      for (Map.Entry<Integer, List<TestStruct>> other_element : other.intToStructListMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        List<TestStruct> other_element_value = other_element.getValue();

        Integer __this__intToStructListMap_copy_key = other_element_key;

        List<TestStruct> __this__intToStructListMap_copy_value = new ArrayList<TestStruct>(other_element_value.size());
        for (TestStruct other_element_value_element : other_element_value) {
          __this__intToStructListMap_copy_value.add(new TestStruct(other_element_value_element));
        }

        __this__intToStructListMap.put(__this__intToStructListMap_copy_key, __this__intToStructListMap_copy_value);
      }
      this.intToStructListMap = __this__intToStructListMap;
    }
    if (other.isSetIntToIntToStrMapMap()) {
      Map<Integer,Map<Integer,String>> __this__intToIntToStrMapMap = new HashMap<Integer,Map<Integer,String>>(other.intToIntToStrMapMap.size());
      for (Map.Entry<Integer, Map<Integer,String>> other_element : other.intToIntToStrMapMap.entrySet()) {

        Integer other_element_key = other_element.getKey();
        Map<Integer,String> other_element_value = other_element.getValue();

        Integer __this__intToIntToStrMapMap_copy_key = other_element_key;

        Map<Integer,String> __this__intToIntToStrMapMap_copy_value = new HashMap<Integer,String>(other_element_value);

        __this__intToIntToStrMapMap.put(__this__intToIntToStrMapMap_copy_key, __this__intToIntToStrMapMap_copy_value);
      }
      this.intToIntToStrMapMap = __this__intToIntToStrMapMap;
    }
    if (other.isSetTestEnum()) {
      this.testEnum = other.testEnum;
    }
  }

  public TestRequest deepCopy() {
    return new TestRequest(this);
  }

  @Override
  public void clear() {
    setTestBoolIsSet(false);
    this.testBool = false;
    setTestSingleByteIsSet(false);
    this.testSingleByte = 0;
    this.testBytes = null;
    setTestShortIsSet(false);
    this.testShort = 0;
    setTestIntIsSet(false);
    this.testInt = 0;
    setTestLongIsSet(false);
    this.testLong = 0;
    setTestDoubleIsSet(false);
    this.testDouble = 0.0;
    this.testString = null;
    this.listInt = null;
    this.listString = null;
    this.listStruct = null;
    this.setInt = null;
    this.setString = null;
    this.setStruct = null;
    this.intToStrMap = null;
    this.intToStructMap = null;
    this.intToStrListMap = null;
    this.intToStructListMap = null;
    this.intToIntToStrMapMap = null;
    this.testEnum = null;
  }

  public boolean isTestBool() {
    return this.testBool;
  }

  public TestRequest setTestBool(boolean testBool) {
    this.testBool = testBool;
    setTestBoolIsSet(true);
    return this;
  }

  public void unsetTestBool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTBOOL_ISSET_ID);
  }

  /** Returns true if field testBool is set (has been assigned a value) and false otherwise */
  public boolean isSetTestBool() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTBOOL_ISSET_ID);
  }

  public void setTestBoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTBOOL_ISSET_ID, value);
  }

  public byte getTestSingleByte() {
    return this.testSingleByte;
  }

  public TestRequest setTestSingleByte(byte testSingleByte) {
    this.testSingleByte = testSingleByte;
    setTestSingleByteIsSet(true);
    return this;
  }

  public void unsetTestSingleByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID);
  }

  /** Returns true if field testSingleByte is set (has been assigned a value) and false otherwise */
  public boolean isSetTestSingleByte() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID);
  }

  public void setTestSingleByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID, value);
  }

  public byte[] getTestBytes() {
    setTestBytes(org.apache.thrift.TBaseHelper.rightSize(testBytes));
    return testBytes == null ? null : testBytes.array();
  }

  public ByteBuffer bufferForTestBytes() {
    return org.apache.thrift.TBaseHelper.copyBinary(testBytes);
  }

  public TestRequest setTestBytes(byte[] testBytes) {
    this.testBytes = testBytes == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(testBytes, testBytes.length));
    return this;
  }

  public TestRequest setTestBytes(ByteBuffer testBytes) {
    this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(testBytes);
    return this;
  }

  public void unsetTestBytes() {
    this.testBytes = null;
  }

  /** Returns true if field testBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetTestBytes() {
    return this.testBytes != null;
  }

  public void setTestBytesIsSet(boolean value) {
    if (!value) {
      this.testBytes = null;
    }
  }

  public short getTestShort() {
    return this.testShort;
  }

  public TestRequest setTestShort(short testShort) {
    this.testShort = testShort;
    setTestShortIsSet(true);
    return this;
  }

  public void unsetTestShort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTSHORT_ISSET_ID);
  }

  /** Returns true if field testShort is set (has been assigned a value) and false otherwise */
  public boolean isSetTestShort() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTSHORT_ISSET_ID);
  }

  public void setTestShortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTSHORT_ISSET_ID, value);
  }

  public int getTestInt() {
    return this.testInt;
  }

  public TestRequest setTestInt(int testInt) {
    this.testInt = testInt;
    setTestIntIsSet(true);
    return this;
  }

  public void unsetTestInt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTINT_ISSET_ID);
  }

  /** Returns true if field testInt is set (has been assigned a value) and false otherwise */
  public boolean isSetTestInt() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTINT_ISSET_ID);
  }

  public void setTestIntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTINT_ISSET_ID, value);
  }

  public long getTestLong() {
    return this.testLong;
  }

  public TestRequest setTestLong(long testLong) {
    this.testLong = testLong;
    setTestLongIsSet(true);
    return this;
  }

  public void unsetTestLong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTLONG_ISSET_ID);
  }

  /** Returns true if field testLong is set (has been assigned a value) and false otherwise */
  public boolean isSetTestLong() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTLONG_ISSET_ID);
  }

  public void setTestLongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTLONG_ISSET_ID, value);
  }

  public double getTestDouble() {
    return this.testDouble;
  }

  public TestRequest setTestDouble(double testDouble) {
    this.testDouble = testDouble;
    setTestDoubleIsSet(true);
    return this;
  }

  public void unsetTestDouble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID);
  }

  /** Returns true if field testDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetTestDouble() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID);
  }

  public void setTestDoubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID, value);
  }

  public String getTestString() {
    return this.testString;
  }

  public TestRequest setTestString(String testString) {
    this.testString = testString;
    return this;
  }

  public void unsetTestString() {
    this.testString = null;
  }

  /** Returns true if field testString is set (has been assigned a value) and false otherwise */
  public boolean isSetTestString() {
    return this.testString != null;
  }

  public void setTestStringIsSet(boolean value) {
    if (!value) {
      this.testString = null;
    }
  }

  public int getListIntSize() {
    return (this.listInt == null) ? 0 : this.listInt.size();
  }

  public java.util.Iterator<Integer> getListIntIterator() {
    return (this.listInt == null) ? null : this.listInt.iterator();
  }

  public void addToListInt(int elem) {
    if (this.listInt == null) {
      this.listInt = new ArrayList<Integer>();
    }
    this.listInt.add(elem);
  }

  public List<Integer> getListInt() {
    return this.listInt;
  }

  public TestRequest setListInt(List<Integer> listInt) {
    this.listInt = listInt;
    return this;
  }

  public void unsetListInt() {
    this.listInt = null;
  }

  /** Returns true if field listInt is set (has been assigned a value) and false otherwise */
  public boolean isSetListInt() {
    return this.listInt != null;
  }

  public void setListIntIsSet(boolean value) {
    if (!value) {
      this.listInt = null;
    }
  }

  public int getListStringSize() {
    return (this.listString == null) ? 0 : this.listString.size();
  }

  public java.util.Iterator<String> getListStringIterator() {
    return (this.listString == null) ? null : this.listString.iterator();
  }

  public void addToListString(String elem) {
    if (this.listString == null) {
      this.listString = new ArrayList<String>();
    }
    this.listString.add(elem);
  }

  public List<String> getListString() {
    return this.listString;
  }

  public TestRequest setListString(List<String> listString) {
    this.listString = listString;
    return this;
  }

  public void unsetListString() {
    this.listString = null;
  }

  /** Returns true if field listString is set (has been assigned a value) and false otherwise */
  public boolean isSetListString() {
    return this.listString != null;
  }

  public void setListStringIsSet(boolean value) {
    if (!value) {
      this.listString = null;
    }
  }

  public int getListStructSize() {
    return (this.listStruct == null) ? 0 : this.listStruct.size();
  }

  public java.util.Iterator<TestStruct> getListStructIterator() {
    return (this.listStruct == null) ? null : this.listStruct.iterator();
  }

  public void addToListStruct(TestStruct elem) {
    if (this.listStruct == null) {
      this.listStruct = new ArrayList<TestStruct>();
    }
    this.listStruct.add(elem);
  }

  public List<TestStruct> getListStruct() {
    return this.listStruct;
  }

  public TestRequest setListStruct(List<TestStruct> listStruct) {
    this.listStruct = listStruct;
    return this;
  }

  public void unsetListStruct() {
    this.listStruct = null;
  }

  /** Returns true if field listStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetListStruct() {
    return this.listStruct != null;
  }

  public void setListStructIsSet(boolean value) {
    if (!value) {
      this.listStruct = null;
    }
  }

  public int getSetIntSize() {
    return (this.setInt == null) ? 0 : this.setInt.size();
  }

  public java.util.Iterator<Integer> getSetIntIterator() {
    return (this.setInt == null) ? null : this.setInt.iterator();
  }

  public void addToSetInt(int elem) {
    if (this.setInt == null) {
      this.setInt = new HashSet<Integer>();
    }
    this.setInt.add(elem);
  }

  public Set<Integer> getSetInt() {
    return this.setInt;
  }

  public TestRequest setSetInt(Set<Integer> setInt) {
    this.setInt = setInt;
    return this;
  }

  public void unsetSetInt() {
    this.setInt = null;
  }

  /** Returns true if field setInt is set (has been assigned a value) and false otherwise */
  public boolean isSetSetInt() {
    return this.setInt != null;
  }

  public void setSetIntIsSet(boolean value) {
    if (!value) {
      this.setInt = null;
    }
  }

  public int getSetStringSize() {
    return (this.setString == null) ? 0 : this.setString.size();
  }

  public java.util.Iterator<String> getSetStringIterator() {
    return (this.setString == null) ? null : this.setString.iterator();
  }

  public void addToSetString(String elem) {
    if (this.setString == null) {
      this.setString = new HashSet<String>();
    }
    this.setString.add(elem);
  }

  public Set<String> getSetString() {
    return this.setString;
  }

  public TestRequest setSetString(Set<String> setString) {
    this.setString = setString;
    return this;
  }

  public void unsetSetString() {
    this.setString = null;
  }

  /** Returns true if field setString is set (has been assigned a value) and false otherwise */
  public boolean isSetSetString() {
    return this.setString != null;
  }

  public void setSetStringIsSet(boolean value) {
    if (!value) {
      this.setString = null;
    }
  }

  public int getSetStructSize() {
    return (this.setStruct == null) ? 0 : this.setStruct.size();
  }

  public java.util.Iterator<TestStruct> getSetStructIterator() {
    return (this.setStruct == null) ? null : this.setStruct.iterator();
  }

  public void addToSetStruct(TestStruct elem) {
    if (this.setStruct == null) {
      this.setStruct = new HashSet<TestStruct>();
    }
    this.setStruct.add(elem);
  }

  public Set<TestStruct> getSetStruct() {
    return this.setStruct;
  }

  public TestRequest setSetStruct(Set<TestStruct> setStruct) {
    this.setStruct = setStruct;
    return this;
  }

  public void unsetSetStruct() {
    this.setStruct = null;
  }

  /** Returns true if field setStruct is set (has been assigned a value) and false otherwise */
  public boolean isSetSetStruct() {
    return this.setStruct != null;
  }

  public void setSetStructIsSet(boolean value) {
    if (!value) {
      this.setStruct = null;
    }
  }

  public int getIntToStrMapSize() {
    return (this.intToStrMap == null) ? 0 : this.intToStrMap.size();
  }

  public void putToIntToStrMap(int key, String val) {
    if (this.intToStrMap == null) {
      this.intToStrMap = new HashMap<Integer,String>();
    }
    this.intToStrMap.put(key, val);
  }

  public Map<Integer,String> getIntToStrMap() {
    return this.intToStrMap;
  }

  public TestRequest setIntToStrMap(Map<Integer,String> intToStrMap) {
    this.intToStrMap = intToStrMap;
    return this;
  }

  public void unsetIntToStrMap() {
    this.intToStrMap = null;
  }

  /** Returns true if field intToStrMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntToStrMap() {
    return this.intToStrMap != null;
  }

  public void setIntToStrMapIsSet(boolean value) {
    if (!value) {
      this.intToStrMap = null;
    }
  }

  public int getIntToStructMapSize() {
    return (this.intToStructMap == null) ? 0 : this.intToStructMap.size();
  }

  public void putToIntToStructMap(int key, TestStruct val) {
    if (this.intToStructMap == null) {
      this.intToStructMap = new HashMap<Integer,TestStruct>();
    }
    this.intToStructMap.put(key, val);
  }

  public Map<Integer,TestStruct> getIntToStructMap() {
    return this.intToStructMap;
  }

  public TestRequest setIntToStructMap(Map<Integer,TestStruct> intToStructMap) {
    this.intToStructMap = intToStructMap;
    return this;
  }

  public void unsetIntToStructMap() {
    this.intToStructMap = null;
  }

  /** Returns true if field intToStructMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntToStructMap() {
    return this.intToStructMap != null;
  }

  public void setIntToStructMapIsSet(boolean value) {
    if (!value) {
      this.intToStructMap = null;
    }
  }

  public int getIntToStrListMapSize() {
    return (this.intToStrListMap == null) ? 0 : this.intToStrListMap.size();
  }

  public void putToIntToStrListMap(int key, List<String> val) {
    if (this.intToStrListMap == null) {
      this.intToStrListMap = new HashMap<Integer,List<String>>();
    }
    this.intToStrListMap.put(key, val);
  }

  public Map<Integer,List<String>> getIntToStrListMap() {
    return this.intToStrListMap;
  }

  public TestRequest setIntToStrListMap(Map<Integer,List<String>> intToStrListMap) {
    this.intToStrListMap = intToStrListMap;
    return this;
  }

  public void unsetIntToStrListMap() {
    this.intToStrListMap = null;
  }

  /** Returns true if field intToStrListMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntToStrListMap() {
    return this.intToStrListMap != null;
  }

  public void setIntToStrListMapIsSet(boolean value) {
    if (!value) {
      this.intToStrListMap = null;
    }
  }

  public int getIntToStructListMapSize() {
    return (this.intToStructListMap == null) ? 0 : this.intToStructListMap.size();
  }

  public void putToIntToStructListMap(int key, List<TestStruct> val) {
    if (this.intToStructListMap == null) {
      this.intToStructListMap = new HashMap<Integer,List<TestStruct>>();
    }
    this.intToStructListMap.put(key, val);
  }

  public Map<Integer,List<TestStruct>> getIntToStructListMap() {
    return this.intToStructListMap;
  }

  public TestRequest setIntToStructListMap(Map<Integer,List<TestStruct>> intToStructListMap) {
    this.intToStructListMap = intToStructListMap;
    return this;
  }

  public void unsetIntToStructListMap() {
    this.intToStructListMap = null;
  }

  /** Returns true if field intToStructListMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntToStructListMap() {
    return this.intToStructListMap != null;
  }

  public void setIntToStructListMapIsSet(boolean value) {
    if (!value) {
      this.intToStructListMap = null;
    }
  }

  public int getIntToIntToStrMapMapSize() {
    return (this.intToIntToStrMapMap == null) ? 0 : this.intToIntToStrMapMap.size();
  }

  public void putToIntToIntToStrMapMap(int key, Map<Integer,String> val) {
    if (this.intToIntToStrMapMap == null) {
      this.intToIntToStrMapMap = new HashMap<Integer,Map<Integer,String>>();
    }
    this.intToIntToStrMapMap.put(key, val);
  }

  public Map<Integer,Map<Integer,String>> getIntToIntToStrMapMap() {
    return this.intToIntToStrMapMap;
  }

  public TestRequest setIntToIntToStrMapMap(Map<Integer,Map<Integer,String>> intToIntToStrMapMap) {
    this.intToIntToStrMapMap = intToIntToStrMapMap;
    return this;
  }

  public void unsetIntToIntToStrMapMap() {
    this.intToIntToStrMapMap = null;
  }

  /** Returns true if field intToIntToStrMapMap is set (has been assigned a value) and false otherwise */
  public boolean isSetIntToIntToStrMapMap() {
    return this.intToIntToStrMapMap != null;
  }

  public void setIntToIntToStrMapMapIsSet(boolean value) {
    if (!value) {
      this.intToIntToStrMapMap = null;
    }
  }

  /**
   * 
   * @see TestEnum
   */
  public TestEnum getTestEnum() {
    return this.testEnum;
  }

  /**
   * 
   * @see TestEnum
   */
  public TestRequest setTestEnum(TestEnum testEnum) {
    this.testEnum = testEnum;
    return this;
  }

  public void unsetTestEnum() {
    this.testEnum = null;
  }

  /** Returns true if field testEnum is set (has been assigned a value) and false otherwise */
  public boolean isSetTestEnum() {
    return this.testEnum != null;
  }

  public void setTestEnumIsSet(boolean value) {
    if (!value) {
      this.testEnum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEST_BOOL:
      if (value == null) {
        unsetTestBool();
      } else {
        setTestBool((Boolean)value);
      }
      break;

    case TEST_SINGLE_BYTE:
      if (value == null) {
        unsetTestSingleByte();
      } else {
        setTestSingleByte((Byte)value);
      }
      break;

    case TEST_BYTES:
      if (value == null) {
        unsetTestBytes();
      } else {
        setTestBytes((ByteBuffer)value);
      }
      break;

    case TEST_SHORT:
      if (value == null) {
        unsetTestShort();
      } else {
        setTestShort((Short)value);
      }
      break;

    case TEST_INT:
      if (value == null) {
        unsetTestInt();
      } else {
        setTestInt((Integer)value);
      }
      break;

    case TEST_LONG:
      if (value == null) {
        unsetTestLong();
      } else {
        setTestLong((Long)value);
      }
      break;

    case TEST_DOUBLE:
      if (value == null) {
        unsetTestDouble();
      } else {
        setTestDouble((Double)value);
      }
      break;

    case TEST_STRING:
      if (value == null) {
        unsetTestString();
      } else {
        setTestString((String)value);
      }
      break;

    case LIST_INT:
      if (value == null) {
        unsetListInt();
      } else {
        setListInt((List<Integer>)value);
      }
      break;

    case LIST_STRING:
      if (value == null) {
        unsetListString();
      } else {
        setListString((List<String>)value);
      }
      break;

    case LIST_STRUCT:
      if (value == null) {
        unsetListStruct();
      } else {
        setListStruct((List<TestStruct>)value);
      }
      break;

    case SET_INT:
      if (value == null) {
        unsetSetInt();
      } else {
        setSetInt((Set<Integer>)value);
      }
      break;

    case SET_STRING:
      if (value == null) {
        unsetSetString();
      } else {
        setSetString((Set<String>)value);
      }
      break;

    case SET_STRUCT:
      if (value == null) {
        unsetSetStruct();
      } else {
        setSetStruct((Set<TestStruct>)value);
      }
      break;

    case INT_TO_STR_MAP:
      if (value == null) {
        unsetIntToStrMap();
      } else {
        setIntToStrMap((Map<Integer,String>)value);
      }
      break;

    case INT_TO_STRUCT_MAP:
      if (value == null) {
        unsetIntToStructMap();
      } else {
        setIntToStructMap((Map<Integer,TestStruct>)value);
      }
      break;

    case INT_TO_STR_LIST_MAP:
      if (value == null) {
        unsetIntToStrListMap();
      } else {
        setIntToStrListMap((Map<Integer,List<String>>)value);
      }
      break;

    case INT_TO_STRUCT_LIST_MAP:
      if (value == null) {
        unsetIntToStructListMap();
      } else {
        setIntToStructListMap((Map<Integer,List<TestStruct>>)value);
      }
      break;

    case INT_TO_INT_TO_STR_MAP_MAP:
      if (value == null) {
        unsetIntToIntToStrMapMap();
      } else {
        setIntToIntToStrMapMap((Map<Integer,Map<Integer,String>>)value);
      }
      break;

    case TEST_ENUM:
      if (value == null) {
        unsetTestEnum();
      } else {
        setTestEnum((TestEnum)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEST_BOOL:
      return Boolean.valueOf(isTestBool());

    case TEST_SINGLE_BYTE:
      return Byte.valueOf(getTestSingleByte());

    case TEST_BYTES:
      return getTestBytes();

    case TEST_SHORT:
      return Short.valueOf(getTestShort());

    case TEST_INT:
      return Integer.valueOf(getTestInt());

    case TEST_LONG:
      return Long.valueOf(getTestLong());

    case TEST_DOUBLE:
      return Double.valueOf(getTestDouble());

    case TEST_STRING:
      return getTestString();

    case LIST_INT:
      return getListInt();

    case LIST_STRING:
      return getListString();

    case LIST_STRUCT:
      return getListStruct();

    case SET_INT:
      return getSetInt();

    case SET_STRING:
      return getSetString();

    case SET_STRUCT:
      return getSetStruct();

    case INT_TO_STR_MAP:
      return getIntToStrMap();

    case INT_TO_STRUCT_MAP:
      return getIntToStructMap();

    case INT_TO_STR_LIST_MAP:
      return getIntToStrListMap();

    case INT_TO_STRUCT_LIST_MAP:
      return getIntToStructListMap();

    case INT_TO_INT_TO_STR_MAP_MAP:
      return getIntToIntToStrMapMap();

    case TEST_ENUM:
      return getTestEnum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEST_BOOL:
      return isSetTestBool();
    case TEST_SINGLE_BYTE:
      return isSetTestSingleByte();
    case TEST_BYTES:
      return isSetTestBytes();
    case TEST_SHORT:
      return isSetTestShort();
    case TEST_INT:
      return isSetTestInt();
    case TEST_LONG:
      return isSetTestLong();
    case TEST_DOUBLE:
      return isSetTestDouble();
    case TEST_STRING:
      return isSetTestString();
    case LIST_INT:
      return isSetListInt();
    case LIST_STRING:
      return isSetListString();
    case LIST_STRUCT:
      return isSetListStruct();
    case SET_INT:
      return isSetSetInt();
    case SET_STRING:
      return isSetSetString();
    case SET_STRUCT:
      return isSetSetStruct();
    case INT_TO_STR_MAP:
      return isSetIntToStrMap();
    case INT_TO_STRUCT_MAP:
      return isSetIntToStructMap();
    case INT_TO_STR_LIST_MAP:
      return isSetIntToStrListMap();
    case INT_TO_STRUCT_LIST_MAP:
      return isSetIntToStructListMap();
    case INT_TO_INT_TO_STR_MAP_MAP:
      return isSetIntToIntToStrMapMap();
    case TEST_ENUM:
      return isSetTestEnum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestRequest)
      return this.equals((TestRequest)that);
    return false;
  }

  public boolean equals(TestRequest that) {
    if (that == null)
      return false;

    boolean this_present_testBool = true;
    boolean that_present_testBool = true;
    if (this_present_testBool || that_present_testBool) {
      if (!(this_present_testBool && that_present_testBool))
        return false;
      if (this.testBool != that.testBool)
        return false;
    }

    boolean this_present_testSingleByte = true;
    boolean that_present_testSingleByte = true;
    if (this_present_testSingleByte || that_present_testSingleByte) {
      if (!(this_present_testSingleByte && that_present_testSingleByte))
        return false;
      if (this.testSingleByte != that.testSingleByte)
        return false;
    }

    boolean this_present_testBytes = true && this.isSetTestBytes();
    boolean that_present_testBytes = true && that.isSetTestBytes();
    if (this_present_testBytes || that_present_testBytes) {
      if (!(this_present_testBytes && that_present_testBytes))
        return false;
      if (!this.testBytes.equals(that.testBytes))
        return false;
    }

    boolean this_present_testShort = true;
    boolean that_present_testShort = true;
    if (this_present_testShort || that_present_testShort) {
      if (!(this_present_testShort && that_present_testShort))
        return false;
      if (this.testShort != that.testShort)
        return false;
    }

    boolean this_present_testInt = true;
    boolean that_present_testInt = true;
    if (this_present_testInt || that_present_testInt) {
      if (!(this_present_testInt && that_present_testInt))
        return false;
      if (this.testInt != that.testInt)
        return false;
    }

    boolean this_present_testLong = true;
    boolean that_present_testLong = true;
    if (this_present_testLong || that_present_testLong) {
      if (!(this_present_testLong && that_present_testLong))
        return false;
      if (this.testLong != that.testLong)
        return false;
    }

    boolean this_present_testDouble = true;
    boolean that_present_testDouble = true;
    if (this_present_testDouble || that_present_testDouble) {
      if (!(this_present_testDouble && that_present_testDouble))
        return false;
      if (this.testDouble != that.testDouble)
        return false;
    }

    boolean this_present_testString = true && this.isSetTestString();
    boolean that_present_testString = true && that.isSetTestString();
    if (this_present_testString || that_present_testString) {
      if (!(this_present_testString && that_present_testString))
        return false;
      if (!this.testString.equals(that.testString))
        return false;
    }

    boolean this_present_listInt = true && this.isSetListInt();
    boolean that_present_listInt = true && that.isSetListInt();
    if (this_present_listInt || that_present_listInt) {
      if (!(this_present_listInt && that_present_listInt))
        return false;
      if (!this.listInt.equals(that.listInt))
        return false;
    }

    boolean this_present_listString = true && this.isSetListString();
    boolean that_present_listString = true && that.isSetListString();
    if (this_present_listString || that_present_listString) {
      if (!(this_present_listString && that_present_listString))
        return false;
      if (!this.listString.equals(that.listString))
        return false;
    }

    boolean this_present_listStruct = true && this.isSetListStruct();
    boolean that_present_listStruct = true && that.isSetListStruct();
    if (this_present_listStruct || that_present_listStruct) {
      if (!(this_present_listStruct && that_present_listStruct))
        return false;
      if (!this.listStruct.equals(that.listStruct))
        return false;
    }

    boolean this_present_setInt = true && this.isSetSetInt();
    boolean that_present_setInt = true && that.isSetSetInt();
    if (this_present_setInt || that_present_setInt) {
      if (!(this_present_setInt && that_present_setInt))
        return false;
      if (!this.setInt.equals(that.setInt))
        return false;
    }

    boolean this_present_setString = true && this.isSetSetString();
    boolean that_present_setString = true && that.isSetSetString();
    if (this_present_setString || that_present_setString) {
      if (!(this_present_setString && that_present_setString))
        return false;
      if (!this.setString.equals(that.setString))
        return false;
    }

    boolean this_present_setStruct = true && this.isSetSetStruct();
    boolean that_present_setStruct = true && that.isSetSetStruct();
    if (this_present_setStruct || that_present_setStruct) {
      if (!(this_present_setStruct && that_present_setStruct))
        return false;
      if (!this.setStruct.equals(that.setStruct))
        return false;
    }

    boolean this_present_intToStrMap = true && this.isSetIntToStrMap();
    boolean that_present_intToStrMap = true && that.isSetIntToStrMap();
    if (this_present_intToStrMap || that_present_intToStrMap) {
      if (!(this_present_intToStrMap && that_present_intToStrMap))
        return false;
      if (!this.intToStrMap.equals(that.intToStrMap))
        return false;
    }

    boolean this_present_intToStructMap = true && this.isSetIntToStructMap();
    boolean that_present_intToStructMap = true && that.isSetIntToStructMap();
    if (this_present_intToStructMap || that_present_intToStructMap) {
      if (!(this_present_intToStructMap && that_present_intToStructMap))
        return false;
      if (!this.intToStructMap.equals(that.intToStructMap))
        return false;
    }

    boolean this_present_intToStrListMap = true && this.isSetIntToStrListMap();
    boolean that_present_intToStrListMap = true && that.isSetIntToStrListMap();
    if (this_present_intToStrListMap || that_present_intToStrListMap) {
      if (!(this_present_intToStrListMap && that_present_intToStrListMap))
        return false;
      if (!this.intToStrListMap.equals(that.intToStrListMap))
        return false;
    }

    boolean this_present_intToStructListMap = true && this.isSetIntToStructListMap();
    boolean that_present_intToStructListMap = true && that.isSetIntToStructListMap();
    if (this_present_intToStructListMap || that_present_intToStructListMap) {
      if (!(this_present_intToStructListMap && that_present_intToStructListMap))
        return false;
      if (!this.intToStructListMap.equals(that.intToStructListMap))
        return false;
    }

    boolean this_present_intToIntToStrMapMap = true && this.isSetIntToIntToStrMapMap();
    boolean that_present_intToIntToStrMapMap = true && that.isSetIntToIntToStrMapMap();
    if (this_present_intToIntToStrMapMap || that_present_intToIntToStrMapMap) {
      if (!(this_present_intToIntToStrMapMap && that_present_intToIntToStrMapMap))
        return false;
      if (!this.intToIntToStrMapMap.equals(that.intToIntToStrMapMap))
        return false;
    }

    boolean this_present_testEnum = true && this.isSetTestEnum();
    boolean that_present_testEnum = true && that.isSetTestEnum();
    if (this_present_testEnum || that_present_testEnum) {
      if (!(this_present_testEnum && that_present_testEnum))
        return false;
      if (!this.testEnum.equals(that.testEnum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_testBool = true;
    list.add(present_testBool);
    if (present_testBool)
      list.add(testBool);

    boolean present_testSingleByte = true;
    list.add(present_testSingleByte);
    if (present_testSingleByte)
      list.add(testSingleByte);

    boolean present_testBytes = true && (isSetTestBytes());
    list.add(present_testBytes);
    if (present_testBytes)
      list.add(testBytes);

    boolean present_testShort = true;
    list.add(present_testShort);
    if (present_testShort)
      list.add(testShort);

    boolean present_testInt = true;
    list.add(present_testInt);
    if (present_testInt)
      list.add(testInt);

    boolean present_testLong = true;
    list.add(present_testLong);
    if (present_testLong)
      list.add(testLong);

    boolean present_testDouble = true;
    list.add(present_testDouble);
    if (present_testDouble)
      list.add(testDouble);

    boolean present_testString = true && (isSetTestString());
    list.add(present_testString);
    if (present_testString)
      list.add(testString);

    boolean present_listInt = true && (isSetListInt());
    list.add(present_listInt);
    if (present_listInt)
      list.add(listInt);

    boolean present_listString = true && (isSetListString());
    list.add(present_listString);
    if (present_listString)
      list.add(listString);

    boolean present_listStruct = true && (isSetListStruct());
    list.add(present_listStruct);
    if (present_listStruct)
      list.add(listStruct);

    boolean present_setInt = true && (isSetSetInt());
    list.add(present_setInt);
    if (present_setInt)
      list.add(setInt);

    boolean present_setString = true && (isSetSetString());
    list.add(present_setString);
    if (present_setString)
      list.add(setString);

    boolean present_setStruct = true && (isSetSetStruct());
    list.add(present_setStruct);
    if (present_setStruct)
      list.add(setStruct);

    boolean present_intToStrMap = true && (isSetIntToStrMap());
    list.add(present_intToStrMap);
    if (present_intToStrMap)
      list.add(intToStrMap);

    boolean present_intToStructMap = true && (isSetIntToStructMap());
    list.add(present_intToStructMap);
    if (present_intToStructMap)
      list.add(intToStructMap);

    boolean present_intToStrListMap = true && (isSetIntToStrListMap());
    list.add(present_intToStrListMap);
    if (present_intToStrListMap)
      list.add(intToStrListMap);

    boolean present_intToStructListMap = true && (isSetIntToStructListMap());
    list.add(present_intToStructListMap);
    if (present_intToStructListMap)
      list.add(intToStructListMap);

    boolean present_intToIntToStrMapMap = true && (isSetIntToIntToStrMapMap());
    list.add(present_intToIntToStrMapMap);
    if (present_intToIntToStrMapMap)
      list.add(intToIntToStrMapMap);

    boolean present_testEnum = true && (isSetTestEnum());
    list.add(present_testEnum);
    if (present_testEnum)
      list.add(testEnum.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TestRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTestBool()).compareTo(other.isSetTestBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestBool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBool, other.testBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestSingleByte()).compareTo(other.isSetTestSingleByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestSingleByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testSingleByte, other.testSingleByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestBytes()).compareTo(other.isSetTestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBytes, other.testBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestShort()).compareTo(other.isSetTestShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testShort, other.testShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestInt()).compareTo(other.isSetTestInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testInt, other.testInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestLong()).compareTo(other.isSetTestLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testLong, other.testLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestDouble()).compareTo(other.isSetTestDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testDouble, other.testDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestString()).compareTo(other.isSetTestString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testString, other.testString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListInt()).compareTo(other.isSetListInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listInt, other.listInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListString()).compareTo(other.isSetListString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listString, other.listString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListStruct()).compareTo(other.isSetListStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listStruct, other.listStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetInt()).compareTo(other.isSetSetInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setInt, other.setInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetString()).compareTo(other.isSetSetString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setString, other.setString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetStruct()).compareTo(other.isSetSetStruct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetStruct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setStruct, other.setStruct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntToStrMap()).compareTo(other.isSetIntToStrMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntToStrMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intToStrMap, other.intToStrMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntToStructMap()).compareTo(other.isSetIntToStructMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntToStructMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intToStructMap, other.intToStructMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntToStrListMap()).compareTo(other.isSetIntToStrListMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntToStrListMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intToStrListMap, other.intToStrListMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntToStructListMap()).compareTo(other.isSetIntToStructListMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntToStructListMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intToStructListMap, other.intToStructListMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIntToIntToStrMapMap()).compareTo(other.isSetIntToIntToStrMapMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntToIntToStrMapMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intToIntToStrMapMap, other.intToIntToStrMapMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestEnum()).compareTo(other.isSetTestEnum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestEnum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testEnum, other.testEnum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestRequest(");
    boolean first = true;

    sb.append("testBool:");
    sb.append(this.testBool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testSingleByte:");
    sb.append(this.testSingleByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testBytes:");
    if (this.testBytes == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.testBytes, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("testShort:");
    sb.append(this.testShort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testInt:");
    sb.append(this.testInt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testLong:");
    sb.append(this.testLong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testDouble:");
    sb.append(this.testDouble);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testString:");
    if (this.testString == null) {
      sb.append("null");
    } else {
      sb.append(this.testString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listInt:");
    if (this.listInt == null) {
      sb.append("null");
    } else {
      sb.append(this.listInt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listString:");
    if (this.listString == null) {
      sb.append("null");
    } else {
      sb.append(this.listString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listStruct:");
    if (this.listStruct == null) {
      sb.append("null");
    } else {
      sb.append(this.listStruct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setInt:");
    if (this.setInt == null) {
      sb.append("null");
    } else {
      sb.append(this.setInt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setString:");
    if (this.setString == null) {
      sb.append("null");
    } else {
      sb.append(this.setString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setStruct:");
    if (this.setStruct == null) {
      sb.append("null");
    } else {
      sb.append(this.setStruct);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intToStrMap:");
    if (this.intToStrMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intToStrMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intToStructMap:");
    if (this.intToStructMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intToStructMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intToStrListMap:");
    if (this.intToStrListMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intToStrListMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intToStructListMap:");
    if (this.intToStructListMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intToStructListMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("intToIntToStrMapMap:");
    if (this.intToIntToStrMapMap == null) {
      sb.append("null");
    } else {
      sb.append(this.intToIntToStrMapMap);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("testEnum:");
    if (this.testEnum == null) {
      sb.append("null");
    } else {
      sb.append(this.testEnum);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestRequestStandardSchemeFactory implements SchemeFactory {
    public TestRequestStandardScheme getScheme() {
      return new TestRequestStandardScheme();
    }
  }

  private static class TestRequestStandardScheme extends StandardScheme<TestRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.testBool = iprot.readBool();
              struct.setTestBoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEST_SINGLE_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.testSingleByte = iprot.readByte();
              struct.setTestSingleByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testBytes = iprot.readBinary();
              struct.setTestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEST_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.testShort = iprot.readI16();
              struct.setTestShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEST_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.testInt = iprot.readI32();
              struct.setTestIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEST_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.testLong = iprot.readI64();
              struct.setTestLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEST_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.testDouble = iprot.readDouble();
              struct.setTestDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testString = iprot.readString();
              struct.setTestStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LIST_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.listInt = new ArrayList<Integer>(_list0.size);
                int _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI32();
                  struct.listInt.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.listString = new ArrayList<String>(_list3.size);
                String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.listString.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setListStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIST_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.listStruct = new ArrayList<TestStruct>(_list6.size);
                TestStruct _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new TestStruct();
                  _elem7.read(iprot);
                  struct.listStruct.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setListStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SET_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set9 = iprot.readSetBegin();
                struct.setInt = new HashSet<Integer>(2*_set9.size);
                int _elem10;
                for (int _i11 = 0; _i11 < _set9.size; ++_i11)
                {
                  _elem10 = iprot.readI32();
                  struct.setInt.add(_elem10);
                }
                iprot.readSetEnd();
              }
              struct.setSetIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SET_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set12 = iprot.readSetBegin();
                struct.setString = new HashSet<String>(2*_set12.size);
                String _elem13;
                for (int _i14 = 0; _i14 < _set12.size; ++_i14)
                {
                  _elem13 = iprot.readString();
                  struct.setString.add(_elem13);
                }
                iprot.readSetEnd();
              }
              struct.setSetStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SET_STRUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set15 = iprot.readSetBegin();
                struct.setStruct = new HashSet<TestStruct>(2*_set15.size);
                TestStruct _elem16;
                for (int _i17 = 0; _i17 < _set15.size; ++_i17)
                {
                  _elem16 = new TestStruct();
                  _elem16.read(iprot);
                  struct.setStruct.add(_elem16);
                }
                iprot.readSetEnd();
              }
              struct.setSetStructIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // INT_TO_STR_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.intToStrMap = new HashMap<Integer,String>(2*_map18.size);
                int _key19;
                String _val20;
                for (int _i21 = 0; _i21 < _map18.size; ++_i21)
                {
                  _key19 = iprot.readI32();
                  _val20 = iprot.readString();
                  struct.intToStrMap.put(_key19, _val20);
                }
                iprot.readMapEnd();
              }
              struct.setIntToStrMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // INT_TO_STRUCT_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                struct.intToStructMap = new HashMap<Integer,TestStruct>(2*_map22.size);
                int _key23;
                TestStruct _val24;
                for (int _i25 = 0; _i25 < _map22.size; ++_i25)
                {
                  _key23 = iprot.readI32();
                  _val24 = new TestStruct();
                  _val24.read(iprot);
                  struct.intToStructMap.put(_key23, _val24);
                }
                iprot.readMapEnd();
              }
              struct.setIntToStructMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // INT_TO_STR_LIST_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.intToStrListMap = new HashMap<Integer,List<String>>(2*_map26.size);
                int _key27;
                List<String> _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                    _val28 = new ArrayList<String>(_list30.size);
                    String _elem31;
                    for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                    {
                      _elem31 = iprot.readString();
                      _val28.add(_elem31);
                    }
                    iprot.readListEnd();
                  }
                  struct.intToStrListMap.put(_key27, _val28);
                }
                iprot.readMapEnd();
              }
              struct.setIntToStrListMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // INT_TO_STRUCT_LIST_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
                struct.intToStructListMap = new HashMap<Integer,List<TestStruct>>(2*_map33.size);
                int _key34;
                List<TestStruct> _val35;
                for (int _i36 = 0; _i36 < _map33.size; ++_i36)
                {
                  _key34 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                    _val35 = new ArrayList<TestStruct>(_list37.size);
                    TestStruct _elem38;
                    for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                    {
                      _elem38 = new TestStruct();
                      _elem38.read(iprot);
                      _val35.add(_elem38);
                    }
                    iprot.readListEnd();
                  }
                  struct.intToStructListMap.put(_key34, _val35);
                }
                iprot.readMapEnd();
              }
              struct.setIntToStructListMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // INT_TO_INT_TO_STR_MAP_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.intToIntToStrMapMap = new HashMap<Integer,Map<Integer,String>>(2*_map40.size);
                int _key41;
                Map<Integer,String> _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                    _val42 = new HashMap<Integer,String>(2*_map44.size);
                    int _key45;
                    String _val46;
                    for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                    {
                      _key45 = iprot.readI32();
                      _val46 = iprot.readString();
                      _val42.put(_key45, _val46);
                    }
                    iprot.readMapEnd();
                  }
                  struct.intToIntToStrMapMap.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setIntToIntToStrMapMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // TEST_ENUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.testEnum = com.example.main.thrift.generated.TestEnum.findByValue(iprot.readI32());
              struct.setTestEnumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEST_BOOL_FIELD_DESC);
      oprot.writeBool(struct.testBool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_SINGLE_BYTE_FIELD_DESC);
      oprot.writeByte(struct.testSingleByte);
      oprot.writeFieldEnd();
      if (struct.testBytes != null) {
        oprot.writeFieldBegin(TEST_BYTES_FIELD_DESC);
        oprot.writeBinary(struct.testBytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEST_SHORT_FIELD_DESC);
      oprot.writeI16(struct.testShort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_INT_FIELD_DESC);
      oprot.writeI32(struct.testInt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_LONG_FIELD_DESC);
      oprot.writeI64(struct.testLong);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.testDouble);
      oprot.writeFieldEnd();
      if (struct.testString != null) {
        oprot.writeFieldBegin(TEST_STRING_FIELD_DESC);
        oprot.writeString(struct.testString);
        oprot.writeFieldEnd();
      }
      if (struct.listInt != null) {
        oprot.writeFieldBegin(LIST_INT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.listInt.size()));
          for (int _iter48 : struct.listInt)
          {
            oprot.writeI32(_iter48);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listString != null) {
        oprot.writeFieldBegin(LIST_STRING_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listString.size()));
          for (String _iter49 : struct.listString)
          {
            oprot.writeString(_iter49);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listStruct != null) {
        oprot.writeFieldBegin(LIST_STRUCT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listStruct.size()));
          for (TestStruct _iter50 : struct.listStruct)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setInt != null) {
        oprot.writeFieldBegin(SET_INT_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.setInt.size()));
          for (int _iter51 : struct.setInt)
          {
            oprot.writeI32(_iter51);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setString != null) {
        oprot.writeFieldBegin(SET_STRING_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.setString.size()));
          for (String _iter52 : struct.setString)
          {
            oprot.writeString(_iter52);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setStruct != null) {
        oprot.writeFieldBegin(SET_STRUCT_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.setStruct.size()));
          for (TestStruct _iter53 : struct.setStruct)
          {
            _iter53.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intToStrMap != null) {
        oprot.writeFieldBegin(INT_TO_STR_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.intToStrMap.size()));
          for (Map.Entry<Integer, String> _iter54 : struct.intToStrMap.entrySet())
          {
            oprot.writeI32(_iter54.getKey());
            oprot.writeString(_iter54.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intToStructMap != null) {
        oprot.writeFieldBegin(INT_TO_STRUCT_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.intToStructMap.size()));
          for (Map.Entry<Integer, TestStruct> _iter55 : struct.intToStructMap.entrySet())
          {
            oprot.writeI32(_iter55.getKey());
            _iter55.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intToStrListMap != null) {
        oprot.writeFieldBegin(INT_TO_STR_LIST_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.intToStrListMap.size()));
          for (Map.Entry<Integer, List<String>> _iter56 : struct.intToStrListMap.entrySet())
          {
            oprot.writeI32(_iter56.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter56.getValue().size()));
              for (String _iter57 : _iter56.getValue())
              {
                oprot.writeString(_iter57);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intToStructListMap != null) {
        oprot.writeFieldBegin(INT_TO_STRUCT_LIST_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.intToStructListMap.size()));
          for (Map.Entry<Integer, List<TestStruct>> _iter58 : struct.intToStructListMap.entrySet())
          {
            oprot.writeI32(_iter58.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter58.getValue().size()));
              for (TestStruct _iter59 : _iter58.getValue())
              {
                _iter59.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.intToIntToStrMapMap != null) {
        oprot.writeFieldBegin(INT_TO_INT_TO_STR_MAP_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.intToIntToStrMapMap.size()));
          for (Map.Entry<Integer, Map<Integer,String>> _iter60 : struct.intToIntToStrMapMap.entrySet())
          {
            oprot.writeI32(_iter60.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter60.getValue().size()));
              for (Map.Entry<Integer, String> _iter61 : _iter60.getValue().entrySet())
              {
                oprot.writeI32(_iter61.getKey());
                oprot.writeString(_iter61.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.testEnum != null) {
        oprot.writeFieldBegin(TEST_ENUM_FIELD_DESC);
        oprot.writeI32(struct.testEnum.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestRequestTupleSchemeFactory implements SchemeFactory {
    public TestRequestTupleScheme getScheme() {
      return new TestRequestTupleScheme();
    }
  }

  private static class TestRequestTupleScheme extends TupleScheme<TestRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTestBool()) {
        optionals.set(0);
      }
      if (struct.isSetTestSingleByte()) {
        optionals.set(1);
      }
      if (struct.isSetTestBytes()) {
        optionals.set(2);
      }
      if (struct.isSetTestShort()) {
        optionals.set(3);
      }
      if (struct.isSetTestInt()) {
        optionals.set(4);
      }
      if (struct.isSetTestLong()) {
        optionals.set(5);
      }
      if (struct.isSetTestDouble()) {
        optionals.set(6);
      }
      if (struct.isSetTestString()) {
        optionals.set(7);
      }
      if (struct.isSetListInt()) {
        optionals.set(8);
      }
      if (struct.isSetListString()) {
        optionals.set(9);
      }
      if (struct.isSetListStruct()) {
        optionals.set(10);
      }
      if (struct.isSetSetInt()) {
        optionals.set(11);
      }
      if (struct.isSetSetString()) {
        optionals.set(12);
      }
      if (struct.isSetSetStruct()) {
        optionals.set(13);
      }
      if (struct.isSetIntToStrMap()) {
        optionals.set(14);
      }
      if (struct.isSetIntToStructMap()) {
        optionals.set(15);
      }
      if (struct.isSetIntToStrListMap()) {
        optionals.set(16);
      }
      if (struct.isSetIntToStructListMap()) {
        optionals.set(17);
      }
      if (struct.isSetIntToIntToStrMapMap()) {
        optionals.set(18);
      }
      if (struct.isSetTestEnum()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetTestBool()) {
        oprot.writeBool(struct.testBool);
      }
      if (struct.isSetTestSingleByte()) {
        oprot.writeByte(struct.testSingleByte);
      }
      if (struct.isSetTestBytes()) {
        oprot.writeBinary(struct.testBytes);
      }
      if (struct.isSetTestShort()) {
        oprot.writeI16(struct.testShort);
      }
      if (struct.isSetTestInt()) {
        oprot.writeI32(struct.testInt);
      }
      if (struct.isSetTestLong()) {
        oprot.writeI64(struct.testLong);
      }
      if (struct.isSetTestDouble()) {
        oprot.writeDouble(struct.testDouble);
      }
      if (struct.isSetTestString()) {
        oprot.writeString(struct.testString);
      }
      if (struct.isSetListInt()) {
        {
          oprot.writeI32(struct.listInt.size());
          for (int _iter62 : struct.listInt)
          {
            oprot.writeI32(_iter62);
          }
        }
      }
      if (struct.isSetListString()) {
        {
          oprot.writeI32(struct.listString.size());
          for (String _iter63 : struct.listString)
          {
            oprot.writeString(_iter63);
          }
        }
      }
      if (struct.isSetListStruct()) {
        {
          oprot.writeI32(struct.listStruct.size());
          for (TestStruct _iter64 : struct.listStruct)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetSetInt()) {
        {
          oprot.writeI32(struct.setInt.size());
          for (int _iter65 : struct.setInt)
          {
            oprot.writeI32(_iter65);
          }
        }
      }
      if (struct.isSetSetString()) {
        {
          oprot.writeI32(struct.setString.size());
          for (String _iter66 : struct.setString)
          {
            oprot.writeString(_iter66);
          }
        }
      }
      if (struct.isSetSetStruct()) {
        {
          oprot.writeI32(struct.setStruct.size());
          for (TestStruct _iter67 : struct.setStruct)
          {
            _iter67.write(oprot);
          }
        }
      }
      if (struct.isSetIntToStrMap()) {
        {
          oprot.writeI32(struct.intToStrMap.size());
          for (Map.Entry<Integer, String> _iter68 : struct.intToStrMap.entrySet())
          {
            oprot.writeI32(_iter68.getKey());
            oprot.writeString(_iter68.getValue());
          }
        }
      }
      if (struct.isSetIntToStructMap()) {
        {
          oprot.writeI32(struct.intToStructMap.size());
          for (Map.Entry<Integer, TestStruct> _iter69 : struct.intToStructMap.entrySet())
          {
            oprot.writeI32(_iter69.getKey());
            _iter69.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetIntToStrListMap()) {
        {
          oprot.writeI32(struct.intToStrListMap.size());
          for (Map.Entry<Integer, List<String>> _iter70 : struct.intToStrListMap.entrySet())
          {
            oprot.writeI32(_iter70.getKey());
            {
              oprot.writeI32(_iter70.getValue().size());
              for (String _iter71 : _iter70.getValue())
              {
                oprot.writeString(_iter71);
              }
            }
          }
        }
      }
      if (struct.isSetIntToStructListMap()) {
        {
          oprot.writeI32(struct.intToStructListMap.size());
          for (Map.Entry<Integer, List<TestStruct>> _iter72 : struct.intToStructListMap.entrySet())
          {
            oprot.writeI32(_iter72.getKey());
            {
              oprot.writeI32(_iter72.getValue().size());
              for (TestStruct _iter73 : _iter72.getValue())
              {
                _iter73.write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetIntToIntToStrMapMap()) {
        {
          oprot.writeI32(struct.intToIntToStrMapMap.size());
          for (Map.Entry<Integer, Map<Integer,String>> _iter74 : struct.intToIntToStrMapMap.entrySet())
          {
            oprot.writeI32(_iter74.getKey());
            {
              oprot.writeI32(_iter74.getValue().size());
              for (Map.Entry<Integer, String> _iter75 : _iter74.getValue().entrySet())
              {
                oprot.writeI32(_iter75.getKey());
                oprot.writeString(_iter75.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetTestEnum()) {
        oprot.writeI32(struct.testEnum.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.testBool = iprot.readBool();
        struct.setTestBoolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.testSingleByte = iprot.readByte();
        struct.setTestSingleByteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.testBytes = iprot.readBinary();
        struct.setTestBytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.testShort = iprot.readI16();
        struct.setTestShortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.testInt = iprot.readI32();
        struct.setTestIntIsSet(true);
      }
      if (incoming.get(5)) {
        struct.testLong = iprot.readI64();
        struct.setTestLongIsSet(true);
      }
      if (incoming.get(6)) {
        struct.testDouble = iprot.readDouble();
        struct.setTestDoubleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.testString = iprot.readString();
        struct.setTestStringIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list76 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.listInt = new ArrayList<Integer>(_list76.size);
          int _elem77;
          for (int _i78 = 0; _i78 < _list76.size; ++_i78)
          {
            _elem77 = iprot.readI32();
            struct.listInt.add(_elem77);
          }
        }
        struct.setListIntIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listString = new ArrayList<String>(_list79.size);
          String _elem80;
          for (int _i81 = 0; _i81 < _list79.size; ++_i81)
          {
            _elem80 = iprot.readString();
            struct.listString.add(_elem80);
          }
        }
        struct.setListStringIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list82 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.listStruct = new ArrayList<TestStruct>(_list82.size);
          TestStruct _elem83;
          for (int _i84 = 0; _i84 < _list82.size; ++_i84)
          {
            _elem83 = new TestStruct();
            _elem83.read(iprot);
            struct.listStruct.add(_elem83);
          }
        }
        struct.setListStructIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set85 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.setInt = new HashSet<Integer>(2*_set85.size);
          int _elem86;
          for (int _i87 = 0; _i87 < _set85.size; ++_i87)
          {
            _elem86 = iprot.readI32();
            struct.setInt.add(_elem86);
          }
        }
        struct.setSetIntIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TSet _set88 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.setString = new HashSet<String>(2*_set88.size);
          String _elem89;
          for (int _i90 = 0; _i90 < _set88.size; ++_i90)
          {
            _elem89 = iprot.readString();
            struct.setString.add(_elem89);
          }
        }
        struct.setSetStringIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TSet _set91 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.setStruct = new HashSet<TestStruct>(2*_set91.size);
          TestStruct _elem92;
          for (int _i93 = 0; _i93 < _set91.size; ++_i93)
          {
            _elem92 = new TestStruct();
            _elem92.read(iprot);
            struct.setStruct.add(_elem92);
          }
        }
        struct.setSetStructIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TMap _map94 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.intToStrMap = new HashMap<Integer,String>(2*_map94.size);
          int _key95;
          String _val96;
          for (int _i97 = 0; _i97 < _map94.size; ++_i97)
          {
            _key95 = iprot.readI32();
            _val96 = iprot.readString();
            struct.intToStrMap.put(_key95, _val96);
          }
        }
        struct.setIntToStrMapIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TMap _map98 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.intToStructMap = new HashMap<Integer,TestStruct>(2*_map98.size);
          int _key99;
          TestStruct _val100;
          for (int _i101 = 0; _i101 < _map98.size; ++_i101)
          {
            _key99 = iprot.readI32();
            _val100 = new TestStruct();
            _val100.read(iprot);
            struct.intToStructMap.put(_key99, _val100);
          }
        }
        struct.setIntToStructMapIsSet(true);
      }
      if (incoming.get(16)) {
        {
          org.apache.thrift.protocol.TMap _map102 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.intToStrListMap = new HashMap<Integer,List<String>>(2*_map102.size);
          int _key103;
          List<String> _val104;
          for (int _i105 = 0; _i105 < _map102.size; ++_i105)
          {
            _key103 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val104 = new ArrayList<String>(_list106.size);
              String _elem107;
              for (int _i108 = 0; _i108 < _list106.size; ++_i108)
              {
                _elem107 = iprot.readString();
                _val104.add(_elem107);
              }
            }
            struct.intToStrListMap.put(_key103, _val104);
          }
        }
        struct.setIntToStrListMapIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TMap _map109 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.intToStructListMap = new HashMap<Integer,List<TestStruct>>(2*_map109.size);
          int _key110;
          List<TestStruct> _val111;
          for (int _i112 = 0; _i112 < _map109.size; ++_i112)
          {
            _key110 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list113 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val111 = new ArrayList<TestStruct>(_list113.size);
              TestStruct _elem114;
              for (int _i115 = 0; _i115 < _list113.size; ++_i115)
              {
                _elem114 = new TestStruct();
                _elem114.read(iprot);
                _val111.add(_elem114);
              }
            }
            struct.intToStructListMap.put(_key110, _val111);
          }
        }
        struct.setIntToStructListMapIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TMap _map116 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.intToIntToStrMapMap = new HashMap<Integer,Map<Integer,String>>(2*_map116.size);
          int _key117;
          Map<Integer,String> _val118;
          for (int _i119 = 0; _i119 < _map116.size; ++_i119)
          {
            _key117 = iprot.readI32();
            {
              org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val118 = new HashMap<Integer,String>(2*_map120.size);
              int _key121;
              String _val122;
              for (int _i123 = 0; _i123 < _map120.size; ++_i123)
              {
                _key121 = iprot.readI32();
                _val122 = iprot.readString();
                _val118.put(_key121, _val122);
              }
            }
            struct.intToIntToStrMapMap.put(_key117, _val118);
          }
        }
        struct.setIntToIntToStrMapMapIsSet(true);
      }
      if (incoming.get(19)) {
        struct.testEnum = com.example.main.thrift.generated.TestEnum.findByValue(iprot.readI32());
        struct.setTestEnumIsSet(true);
      }
    }
  }

}

