/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.main.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2021-2-20")
public class TestStruct implements org.apache.thrift.TBase<TestStruct, TestStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TestStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestStruct");

  private static final org.apache.thrift.protocol.TField TEST_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("testBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField TEST_SINGLE_BYTE_FIELD_DESC = new org.apache.thrift.protocol.TField("testSingleByte", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField TEST_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("testBytes", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TEST_SHORT_FIELD_DESC = new org.apache.thrift.protocol.TField("testShort", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField TEST_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("testInt", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField TEST_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("testLong", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField TEST_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("testDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TEST_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("testString", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestStructStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestStructTupleSchemeFactory());
  }

  public boolean testBool; // required
  public byte testSingleByte; // required
  public ByteBuffer testBytes; // required
  public short testShort; // required
  public int testInt; // required
  public long testLong; // required
  public double testDouble; // required
  public String testString; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEST_BOOL((short)1, "testBool"),
    TEST_SINGLE_BYTE((short)2, "testSingleByte"),
    TEST_BYTES((short)3, "testBytes"),
    TEST_SHORT((short)4, "testShort"),
    TEST_INT((short)5, "testInt"),
    TEST_LONG((short)6, "testLong"),
    TEST_DOUBLE((short)7, "testDouble"),
    TEST_STRING((short)8, "testString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEST_BOOL
          return TEST_BOOL;
        case 2: // TEST_SINGLE_BYTE
          return TEST_SINGLE_BYTE;
        case 3: // TEST_BYTES
          return TEST_BYTES;
        case 4: // TEST_SHORT
          return TEST_SHORT;
        case 5: // TEST_INT
          return TEST_INT;
        case 6: // TEST_LONG
          return TEST_LONG;
        case 7: // TEST_DOUBLE
          return TEST_DOUBLE;
        case 8: // TEST_STRING
          return TEST_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TESTBOOL_ISSET_ID = 0;
  private static final int __TESTSINGLEBYTE_ISSET_ID = 1;
  private static final int __TESTSHORT_ISSET_ID = 2;
  private static final int __TESTINT_ISSET_ID = 3;
  private static final int __TESTLONG_ISSET_ID = 4;
  private static final int __TESTDOUBLE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEST_BOOL, new org.apache.thrift.meta_data.FieldMetaData("testBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TEST_SINGLE_BYTE, new org.apache.thrift.meta_data.FieldMetaData("testSingleByte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.TEST_BYTES, new org.apache.thrift.meta_data.FieldMetaData("testBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TEST_SHORT, new org.apache.thrift.meta_data.FieldMetaData("testShort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TEST_INT, new org.apache.thrift.meta_data.FieldMetaData("testInt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TEST_LONG, new org.apache.thrift.meta_data.FieldMetaData("testLong", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TEST_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("testDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TEST_STRING, new org.apache.thrift.meta_data.FieldMetaData("testString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestStruct.class, metaDataMap);
  }

  public TestStruct() {
  }

  public TestStruct(
    boolean testBool,
    byte testSingleByte,
    ByteBuffer testBytes,
    short testShort,
    int testInt,
    long testLong,
    double testDouble,
    String testString)
  {
    this();
    this.testBool = testBool;
    setTestBoolIsSet(true);
    this.testSingleByte = testSingleByte;
    setTestSingleByteIsSet(true);
    this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(testBytes);
    this.testShort = testShort;
    setTestShortIsSet(true);
    this.testInt = testInt;
    setTestIntIsSet(true);
    this.testLong = testLong;
    setTestLongIsSet(true);
    this.testDouble = testDouble;
    setTestDoubleIsSet(true);
    this.testString = testString;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestStruct(TestStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.testBool = other.testBool;
    this.testSingleByte = other.testSingleByte;
    if (other.isSetTestBytes()) {
      this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(other.testBytes);
    }
    this.testShort = other.testShort;
    this.testInt = other.testInt;
    this.testLong = other.testLong;
    this.testDouble = other.testDouble;
    if (other.isSetTestString()) {
      this.testString = other.testString;
    }
  }

  public TestStruct deepCopy() {
    return new TestStruct(this);
  }

  @Override
  public void clear() {
    setTestBoolIsSet(false);
    this.testBool = false;
    setTestSingleByteIsSet(false);
    this.testSingleByte = 0;
    this.testBytes = null;
    setTestShortIsSet(false);
    this.testShort = 0;
    setTestIntIsSet(false);
    this.testInt = 0;
    setTestLongIsSet(false);
    this.testLong = 0;
    setTestDoubleIsSet(false);
    this.testDouble = 0.0;
    this.testString = null;
  }

  public boolean isTestBool() {
    return this.testBool;
  }

  public TestStruct setTestBool(boolean testBool) {
    this.testBool = testBool;
    setTestBoolIsSet(true);
    return this;
  }

  public void unsetTestBool() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTBOOL_ISSET_ID);
  }

  /** Returns true if field testBool is set (has been assigned a value) and false otherwise */
  public boolean isSetTestBool() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTBOOL_ISSET_ID);
  }

  public void setTestBoolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTBOOL_ISSET_ID, value);
  }

  public byte getTestSingleByte() {
    return this.testSingleByte;
  }

  public TestStruct setTestSingleByte(byte testSingleByte) {
    this.testSingleByte = testSingleByte;
    setTestSingleByteIsSet(true);
    return this;
  }

  public void unsetTestSingleByte() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID);
  }

  /** Returns true if field testSingleByte is set (has been assigned a value) and false otherwise */
  public boolean isSetTestSingleByte() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID);
  }

  public void setTestSingleByteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTSINGLEBYTE_ISSET_ID, value);
  }

  public byte[] getTestBytes() {
    setTestBytes(org.apache.thrift.TBaseHelper.rightSize(testBytes));
    return testBytes == null ? null : testBytes.array();
  }

  public ByteBuffer bufferForTestBytes() {
    return org.apache.thrift.TBaseHelper.copyBinary(testBytes);
  }

  public TestStruct setTestBytes(byte[] testBytes) {
    this.testBytes = testBytes == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(testBytes, testBytes.length));
    return this;
  }

  public TestStruct setTestBytes(ByteBuffer testBytes) {
    this.testBytes = org.apache.thrift.TBaseHelper.copyBinary(testBytes);
    return this;
  }

  public void unsetTestBytes() {
    this.testBytes = null;
  }

  /** Returns true if field testBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetTestBytes() {
    return this.testBytes != null;
  }

  public void setTestBytesIsSet(boolean value) {
    if (!value) {
      this.testBytes = null;
    }
  }

  public short getTestShort() {
    return this.testShort;
  }

  public TestStruct setTestShort(short testShort) {
    this.testShort = testShort;
    setTestShortIsSet(true);
    return this;
  }

  public void unsetTestShort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTSHORT_ISSET_ID);
  }

  /** Returns true if field testShort is set (has been assigned a value) and false otherwise */
  public boolean isSetTestShort() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTSHORT_ISSET_ID);
  }

  public void setTestShortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTSHORT_ISSET_ID, value);
  }

  public int getTestInt() {
    return this.testInt;
  }

  public TestStruct setTestInt(int testInt) {
    this.testInt = testInt;
    setTestIntIsSet(true);
    return this;
  }

  public void unsetTestInt() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTINT_ISSET_ID);
  }

  /** Returns true if field testInt is set (has been assigned a value) and false otherwise */
  public boolean isSetTestInt() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTINT_ISSET_ID);
  }

  public void setTestIntIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTINT_ISSET_ID, value);
  }

  public long getTestLong() {
    return this.testLong;
  }

  public TestStruct setTestLong(long testLong) {
    this.testLong = testLong;
    setTestLongIsSet(true);
    return this;
  }

  public void unsetTestLong() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTLONG_ISSET_ID);
  }

  /** Returns true if field testLong is set (has been assigned a value) and false otherwise */
  public boolean isSetTestLong() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTLONG_ISSET_ID);
  }

  public void setTestLongIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTLONG_ISSET_ID, value);
  }

  public double getTestDouble() {
    return this.testDouble;
  }

  public TestStruct setTestDouble(double testDouble) {
    this.testDouble = testDouble;
    setTestDoubleIsSet(true);
    return this;
  }

  public void unsetTestDouble() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID);
  }

  /** Returns true if field testDouble is set (has been assigned a value) and false otherwise */
  public boolean isSetTestDouble() {
    return EncodingUtils.testBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID);
  }

  public void setTestDoubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TESTDOUBLE_ISSET_ID, value);
  }

  public String getTestString() {
    return this.testString;
  }

  public TestStruct setTestString(String testString) {
    this.testString = testString;
    return this;
  }

  public void unsetTestString() {
    this.testString = null;
  }

  /** Returns true if field testString is set (has been assigned a value) and false otherwise */
  public boolean isSetTestString() {
    return this.testString != null;
  }

  public void setTestStringIsSet(boolean value) {
    if (!value) {
      this.testString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEST_BOOL:
      if (value == null) {
        unsetTestBool();
      } else {
        setTestBool((Boolean)value);
      }
      break;

    case TEST_SINGLE_BYTE:
      if (value == null) {
        unsetTestSingleByte();
      } else {
        setTestSingleByte((Byte)value);
      }
      break;

    case TEST_BYTES:
      if (value == null) {
        unsetTestBytes();
      } else {
        setTestBytes((ByteBuffer)value);
      }
      break;

    case TEST_SHORT:
      if (value == null) {
        unsetTestShort();
      } else {
        setTestShort((Short)value);
      }
      break;

    case TEST_INT:
      if (value == null) {
        unsetTestInt();
      } else {
        setTestInt((Integer)value);
      }
      break;

    case TEST_LONG:
      if (value == null) {
        unsetTestLong();
      } else {
        setTestLong((Long)value);
      }
      break;

    case TEST_DOUBLE:
      if (value == null) {
        unsetTestDouble();
      } else {
        setTestDouble((Double)value);
      }
      break;

    case TEST_STRING:
      if (value == null) {
        unsetTestString();
      } else {
        setTestString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEST_BOOL:
      return Boolean.valueOf(isTestBool());

    case TEST_SINGLE_BYTE:
      return Byte.valueOf(getTestSingleByte());

    case TEST_BYTES:
      return getTestBytes();

    case TEST_SHORT:
      return Short.valueOf(getTestShort());

    case TEST_INT:
      return Integer.valueOf(getTestInt());

    case TEST_LONG:
      return Long.valueOf(getTestLong());

    case TEST_DOUBLE:
      return Double.valueOf(getTestDouble());

    case TEST_STRING:
      return getTestString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEST_BOOL:
      return isSetTestBool();
    case TEST_SINGLE_BYTE:
      return isSetTestSingleByte();
    case TEST_BYTES:
      return isSetTestBytes();
    case TEST_SHORT:
      return isSetTestShort();
    case TEST_INT:
      return isSetTestInt();
    case TEST_LONG:
      return isSetTestLong();
    case TEST_DOUBLE:
      return isSetTestDouble();
    case TEST_STRING:
      return isSetTestString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestStruct)
      return this.equals((TestStruct)that);
    return false;
  }

  public boolean equals(TestStruct that) {
    if (that == null)
      return false;

    boolean this_present_testBool = true;
    boolean that_present_testBool = true;
    if (this_present_testBool || that_present_testBool) {
      if (!(this_present_testBool && that_present_testBool))
        return false;
      if (this.testBool != that.testBool)
        return false;
    }

    boolean this_present_testSingleByte = true;
    boolean that_present_testSingleByte = true;
    if (this_present_testSingleByte || that_present_testSingleByte) {
      if (!(this_present_testSingleByte && that_present_testSingleByte))
        return false;
      if (this.testSingleByte != that.testSingleByte)
        return false;
    }

    boolean this_present_testBytes = true && this.isSetTestBytes();
    boolean that_present_testBytes = true && that.isSetTestBytes();
    if (this_present_testBytes || that_present_testBytes) {
      if (!(this_present_testBytes && that_present_testBytes))
        return false;
      if (!this.testBytes.equals(that.testBytes))
        return false;
    }

    boolean this_present_testShort = true;
    boolean that_present_testShort = true;
    if (this_present_testShort || that_present_testShort) {
      if (!(this_present_testShort && that_present_testShort))
        return false;
      if (this.testShort != that.testShort)
        return false;
    }

    boolean this_present_testInt = true;
    boolean that_present_testInt = true;
    if (this_present_testInt || that_present_testInt) {
      if (!(this_present_testInt && that_present_testInt))
        return false;
      if (this.testInt != that.testInt)
        return false;
    }

    boolean this_present_testLong = true;
    boolean that_present_testLong = true;
    if (this_present_testLong || that_present_testLong) {
      if (!(this_present_testLong && that_present_testLong))
        return false;
      if (this.testLong != that.testLong)
        return false;
    }

    boolean this_present_testDouble = true;
    boolean that_present_testDouble = true;
    if (this_present_testDouble || that_present_testDouble) {
      if (!(this_present_testDouble && that_present_testDouble))
        return false;
      if (this.testDouble != that.testDouble)
        return false;
    }

    boolean this_present_testString = true && this.isSetTestString();
    boolean that_present_testString = true && that.isSetTestString();
    if (this_present_testString || that_present_testString) {
      if (!(this_present_testString && that_present_testString))
        return false;
      if (!this.testString.equals(that.testString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_testBool = true;
    list.add(present_testBool);
    if (present_testBool)
      list.add(testBool);

    boolean present_testSingleByte = true;
    list.add(present_testSingleByte);
    if (present_testSingleByte)
      list.add(testSingleByte);

    boolean present_testBytes = true && (isSetTestBytes());
    list.add(present_testBytes);
    if (present_testBytes)
      list.add(testBytes);

    boolean present_testShort = true;
    list.add(present_testShort);
    if (present_testShort)
      list.add(testShort);

    boolean present_testInt = true;
    list.add(present_testInt);
    if (present_testInt)
      list.add(testInt);

    boolean present_testLong = true;
    list.add(present_testLong);
    if (present_testLong)
      list.add(testLong);

    boolean present_testDouble = true;
    list.add(present_testDouble);
    if (present_testDouble)
      list.add(testDouble);

    boolean present_testString = true && (isSetTestString());
    list.add(present_testString);
    if (present_testString)
      list.add(testString);

    return list.hashCode();
  }

  @Override
  public int compareTo(TestStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTestBool()).compareTo(other.isSetTestBool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestBool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBool, other.testBool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestSingleByte()).compareTo(other.isSetTestSingleByte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestSingleByte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testSingleByte, other.testSingleByte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestBytes()).compareTo(other.isSetTestBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testBytes, other.testBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestShort()).compareTo(other.isSetTestShort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestShort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testShort, other.testShort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestInt()).compareTo(other.isSetTestInt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestInt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testInt, other.testInt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestLong()).compareTo(other.isSetTestLong());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestLong()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testLong, other.testLong);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestDouble()).compareTo(other.isSetTestDouble());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestDouble()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testDouble, other.testDouble);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTestString()).compareTo(other.isSetTestString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTestString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.testString, other.testString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestStruct(");
    boolean first = true;

    sb.append("testBool:");
    sb.append(this.testBool);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testSingleByte:");
    sb.append(this.testSingleByte);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testBytes:");
    if (this.testBytes == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.testBytes, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("testShort:");
    sb.append(this.testShort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testInt:");
    sb.append(this.testInt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testLong:");
    sb.append(this.testLong);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testDouble:");
    sb.append(this.testDouble);
    first = false;
    if (!first) sb.append(", ");
    sb.append("testString:");
    if (this.testString == null) {
      sb.append("null");
    } else {
      sb.append(this.testString);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestStructStandardSchemeFactory implements SchemeFactory {
    public TestStructStandardScheme getScheme() {
      return new TestStructStandardScheme();
    }
  }

  private static class TestStructStandardScheme extends StandardScheme<TestStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TestStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TEST_BOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.testBool = iprot.readBool();
              struct.setTestBoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEST_SINGLE_BYTE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.testSingleByte = iprot.readByte();
              struct.setTestSingleByteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEST_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testBytes = iprot.readBinary();
              struct.setTestBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEST_SHORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.testShort = iprot.readI16();
              struct.setTestShortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEST_INT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.testInt = iprot.readI32();
              struct.setTestIntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TEST_LONG
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.testLong = iprot.readI64();
              struct.setTestLongIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEST_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.testDouble = iprot.readDouble();
              struct.setTestDoubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TEST_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.testString = iprot.readString();
              struct.setTestStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TestStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TEST_BOOL_FIELD_DESC);
      oprot.writeBool(struct.testBool);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_SINGLE_BYTE_FIELD_DESC);
      oprot.writeByte(struct.testSingleByte);
      oprot.writeFieldEnd();
      if (struct.testBytes != null) {
        oprot.writeFieldBegin(TEST_BYTES_FIELD_DESC);
        oprot.writeBinary(struct.testBytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TEST_SHORT_FIELD_DESC);
      oprot.writeI16(struct.testShort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_INT_FIELD_DESC);
      oprot.writeI32(struct.testInt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_LONG_FIELD_DESC);
      oprot.writeI64(struct.testLong);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TEST_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.testDouble);
      oprot.writeFieldEnd();
      if (struct.testString != null) {
        oprot.writeFieldBegin(TEST_STRING_FIELD_DESC);
        oprot.writeString(struct.testString);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestStructTupleSchemeFactory implements SchemeFactory {
    public TestStructTupleScheme getScheme() {
      return new TestStructTupleScheme();
    }
  }

  private static class TestStructTupleScheme extends TupleScheme<TestStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTestBool()) {
        optionals.set(0);
      }
      if (struct.isSetTestSingleByte()) {
        optionals.set(1);
      }
      if (struct.isSetTestBytes()) {
        optionals.set(2);
      }
      if (struct.isSetTestShort()) {
        optionals.set(3);
      }
      if (struct.isSetTestInt()) {
        optionals.set(4);
      }
      if (struct.isSetTestLong()) {
        optionals.set(5);
      }
      if (struct.isSetTestDouble()) {
        optionals.set(6);
      }
      if (struct.isSetTestString()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetTestBool()) {
        oprot.writeBool(struct.testBool);
      }
      if (struct.isSetTestSingleByte()) {
        oprot.writeByte(struct.testSingleByte);
      }
      if (struct.isSetTestBytes()) {
        oprot.writeBinary(struct.testBytes);
      }
      if (struct.isSetTestShort()) {
        oprot.writeI16(struct.testShort);
      }
      if (struct.isSetTestInt()) {
        oprot.writeI32(struct.testInt);
      }
      if (struct.isSetTestLong()) {
        oprot.writeI64(struct.testLong);
      }
      if (struct.isSetTestDouble()) {
        oprot.writeDouble(struct.testDouble);
      }
      if (struct.isSetTestString()) {
        oprot.writeString(struct.testString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TestStruct struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.testBool = iprot.readBool();
        struct.setTestBoolIsSet(true);
      }
      if (incoming.get(1)) {
        struct.testSingleByte = iprot.readByte();
        struct.setTestSingleByteIsSet(true);
      }
      if (incoming.get(2)) {
        struct.testBytes = iprot.readBinary();
        struct.setTestBytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.testShort = iprot.readI16();
        struct.setTestShortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.testInt = iprot.readI32();
        struct.setTestIntIsSet(true);
      }
      if (incoming.get(5)) {
        struct.testLong = iprot.readI64();
        struct.setTestLongIsSet(true);
      }
      if (incoming.get(6)) {
        struct.testDouble = iprot.readDouble();
        struct.setTestDoubleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.testString = iprot.readString();
        struct.setTestStringIsSet(true);
      }
    }
  }

}

